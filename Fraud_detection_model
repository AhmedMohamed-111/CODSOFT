{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1399887,"sourceType":"datasetVersion","datasetId":817870}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Fraud prediction model","metadata":{}},{"cell_type":"markdown","source":"in this notebook , i worked with XGBoost model and analyse the data to get best performance to my model","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-30T12:58:28.713909Z","iopub.execute_input":"2024-07-30T12:58:28.715284Z","iopub.status.idle":"2024-07-30T12:58:29.260435Z","shell.execute_reply.started":"2024-07-30T12:58:28.715231Z","shell.execute_reply":"2024-07-30T12:58:29.259076Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/fraud-detection/fraudTest.csv\n/kaggle/input/fraud-detection/fraudTrain.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"train_data = pd.read_csv('/kaggle/input/fraud-detection/fraudTrain.csv')\ntest_data = pd.read_csv('/kaggle/input/fraud-detection/fraudTest.csv')\nprint('train data shape :',train_data.shape)\nprint('test data shape :',test_data.shape)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T12:58:29.262186Z","iopub.execute_input":"2024-07-30T12:58:29.262774Z","iopub.status.idle":"2024-07-30T12:58:45.346745Z","shell.execute_reply.started":"2024-07-30T12:58:29.262738Z","shell.execute_reply":"2024-07-30T12:58:45.345304Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"train data shape : (1296675, 23)\ntest data shape : (555719, 23)\n","output_type":"stream"}]},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T12:58:45.348467Z","iopub.execute_input":"2024-07-30T12:58:45.348869Z","iopub.status.idle":"2024-07-30T12:58:45.385125Z","shell.execute_reply.started":"2024-07-30T12:58:45.348837Z","shell.execute_reply":"2024-07-30T12:58:45.383944Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"   Unnamed: 0 trans_date_trans_time            cc_num  \\\n0           0   2019-01-01 00:00:18  2703186189652095   \n1           1   2019-01-01 00:00:44      630423337322   \n2           2   2019-01-01 00:00:51    38859492057661   \n3           3   2019-01-01 00:01:16  3534093764340240   \n4           4   2019-01-01 00:03:06   375534208663984   \n\n                             merchant       category     amt      first  \\\n0          fraud_Rippin, Kub and Mann       misc_net    4.97   Jennifer   \n1     fraud_Heller, Gutmann and Zieme    grocery_pos  107.23  Stephanie   \n2                fraud_Lind-Buckridge  entertainment  220.11     Edward   \n3  fraud_Kutch, Hermiston and Farrell  gas_transport   45.00     Jeremy   \n4                 fraud_Keeling-Crist       misc_pos   41.96      Tyler   \n\n      last gender                        street  ...      lat      long  \\\n0    Banks      F                561 Perry Cove  ...  36.0788  -81.1781   \n1     Gill      F  43039 Riley Greens Suite 393  ...  48.8878 -118.2105   \n2  Sanchez      M      594 White Dale Suite 530  ...  42.1808 -112.2620   \n3    White      M   9443 Cynthia Court Apt. 038  ...  46.2306 -112.1138   \n4   Garcia      M              408 Bradley Rest  ...  38.4207  -79.4629   \n\n   city_pop                                job         dob  \\\n0      3495          Psychologist, counselling  1988-03-09   \n1       149  Special educational needs teacher  1978-06-21   \n2      4154        Nature conservation officer  1962-01-19   \n3      1939                    Patent attorney  1967-01-12   \n4        99     Dance movement psychotherapist  1986-03-28   \n\n                          trans_num   unix_time  merch_lat  merch_long  \\\n0  0b242abb623afc578575680df30655b9  1325376018  36.011293  -82.048315   \n1  1f76529f8574734946361c461b024d99  1325376044  49.159047 -118.186462   \n2  a1a22d70485983eac12b5b88dad1cf95  1325376051  43.150704 -112.154481   \n3  6b849c168bdad6f867558c3793159a81  1325376076  47.034331 -112.561071   \n4  a41d7549acf90789359a9aa5346dcb46  1325376186  38.674999  -78.632459   \n\n   is_fraud  \n0         0  \n1         0  \n2         0  \n3         0  \n4         0  \n\n[5 rows x 23 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>trans_date_trans_time</th>\n      <th>cc_num</th>\n      <th>merchant</th>\n      <th>category</th>\n      <th>amt</th>\n      <th>first</th>\n      <th>last</th>\n      <th>gender</th>\n      <th>street</th>\n      <th>...</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>city_pop</th>\n      <th>job</th>\n      <th>dob</th>\n      <th>trans_num</th>\n      <th>unix_time</th>\n      <th>merch_lat</th>\n      <th>merch_long</th>\n      <th>is_fraud</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>2019-01-01 00:00:18</td>\n      <td>2703186189652095</td>\n      <td>fraud_Rippin, Kub and Mann</td>\n      <td>misc_net</td>\n      <td>4.97</td>\n      <td>Jennifer</td>\n      <td>Banks</td>\n      <td>F</td>\n      <td>561 Perry Cove</td>\n      <td>...</td>\n      <td>36.0788</td>\n      <td>-81.1781</td>\n      <td>3495</td>\n      <td>Psychologist, counselling</td>\n      <td>1988-03-09</td>\n      <td>0b242abb623afc578575680df30655b9</td>\n      <td>1325376018</td>\n      <td>36.011293</td>\n      <td>-82.048315</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2019-01-01 00:00:44</td>\n      <td>630423337322</td>\n      <td>fraud_Heller, Gutmann and Zieme</td>\n      <td>grocery_pos</td>\n      <td>107.23</td>\n      <td>Stephanie</td>\n      <td>Gill</td>\n      <td>F</td>\n      <td>43039 Riley Greens Suite 393</td>\n      <td>...</td>\n      <td>48.8878</td>\n      <td>-118.2105</td>\n      <td>149</td>\n      <td>Special educational needs teacher</td>\n      <td>1978-06-21</td>\n      <td>1f76529f8574734946361c461b024d99</td>\n      <td>1325376044</td>\n      <td>49.159047</td>\n      <td>-118.186462</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>2019-01-01 00:00:51</td>\n      <td>38859492057661</td>\n      <td>fraud_Lind-Buckridge</td>\n      <td>entertainment</td>\n      <td>220.11</td>\n      <td>Edward</td>\n      <td>Sanchez</td>\n      <td>M</td>\n      <td>594 White Dale Suite 530</td>\n      <td>...</td>\n      <td>42.1808</td>\n      <td>-112.2620</td>\n      <td>4154</td>\n      <td>Nature conservation officer</td>\n      <td>1962-01-19</td>\n      <td>a1a22d70485983eac12b5b88dad1cf95</td>\n      <td>1325376051</td>\n      <td>43.150704</td>\n      <td>-112.154481</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>2019-01-01 00:01:16</td>\n      <td>3534093764340240</td>\n      <td>fraud_Kutch, Hermiston and Farrell</td>\n      <td>gas_transport</td>\n      <td>45.00</td>\n      <td>Jeremy</td>\n      <td>White</td>\n      <td>M</td>\n      <td>9443 Cynthia Court Apt. 038</td>\n      <td>...</td>\n      <td>46.2306</td>\n      <td>-112.1138</td>\n      <td>1939</td>\n      <td>Patent attorney</td>\n      <td>1967-01-12</td>\n      <td>6b849c168bdad6f867558c3793159a81</td>\n      <td>1325376076</td>\n      <td>47.034331</td>\n      <td>-112.561071</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>2019-01-01 00:03:06</td>\n      <td>375534208663984</td>\n      <td>fraud_Keeling-Crist</td>\n      <td>misc_pos</td>\n      <td>41.96</td>\n      <td>Tyler</td>\n      <td>Garcia</td>\n      <td>M</td>\n      <td>408 Bradley Rest</td>\n      <td>...</td>\n      <td>38.4207</td>\n      <td>-79.4629</td>\n      <td>99</td>\n      <td>Dance movement psychotherapist</td>\n      <td>1986-03-28</td>\n      <td>a41d7549acf90789359a9aa5346dcb46</td>\n      <td>1325376186</td>\n      <td>38.674999</td>\n      <td>-78.632459</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 23 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T12:58:45.388717Z","iopub.execute_input":"2024-07-30T12:58:45.389176Z","iopub.status.idle":"2024-07-30T12:58:45.418402Z","shell.execute_reply.started":"2024-07-30T12:58:45.389134Z","shell.execute_reply":"2024-07-30T12:58:45.416970Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   Unnamed: 0 trans_date_trans_time            cc_num  \\\n0           0   2020-06-21 12:14:25  2291163933867244   \n1           1   2020-06-21 12:14:33  3573030041201292   \n2           2   2020-06-21 12:14:53  3598215285024754   \n3           3   2020-06-21 12:15:15  3591919803438423   \n4           4   2020-06-21 12:15:17  3526826139003047   \n\n                               merchant        category    amt   first  \\\n0                 fraud_Kirlin and Sons   personal_care   2.86    Jeff   \n1                  fraud_Sporer-Keebler   personal_care  29.84  Joanne   \n2  fraud_Swaniawski, Nitzsche and Welch  health_fitness  41.28  Ashley   \n3                     fraud_Haley Group        misc_pos  60.05   Brian   \n4                 fraud_Johnston-Casper          travel   3.19  Nathan   \n\n       last gender                       street  ...      lat      long  \\\n0   Elliott      M            351 Darlene Green  ...  33.9659  -80.9355   \n1  Williams      F             3638 Marsh Union  ...  40.3207 -110.4360   \n2     Lopez      F         9333 Valentine Point  ...  40.6729  -73.5365   \n3  Williams      M  32941 Krystal Mill Apt. 552  ...  28.5697  -80.8191   \n4    Massey      M     5783 Evan Roads Apt. 465  ...  44.2529  -85.0170   \n\n   city_pop                     job         dob  \\\n0    333497     Mechanical engineer  1968-03-19   \n1       302  Sales professional, IT  1990-01-17   \n2     34496       Librarian, public  1970-10-21   \n3     54767            Set designer  1987-07-25   \n4      1126      Furniture designer  1955-07-06   \n\n                          trans_num   unix_time  merch_lat  merch_long  \\\n0  2da90c7d74bd46a0caf3777415b3ebd3  1371816865  33.986391  -81.200714   \n1  324cc204407e99f51b0d6ca0055005e7  1371816873  39.450498 -109.960431   \n2  c81755dbbbea9d5c77f094348a7579be  1371816893  40.495810  -74.196111   \n3  2159175b9efe66dc301f149d3d5abf8c  1371816915  28.812398  -80.883061   \n4  57ff021bd3f328f8738bb535c302a31b  1371816917  44.959148  -85.884734   \n\n   is_fraud  \n0         0  \n1         0  \n2         0  \n3         0  \n4         0  \n\n[5 rows x 23 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>trans_date_trans_time</th>\n      <th>cc_num</th>\n      <th>merchant</th>\n      <th>category</th>\n      <th>amt</th>\n      <th>first</th>\n      <th>last</th>\n      <th>gender</th>\n      <th>street</th>\n      <th>...</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>city_pop</th>\n      <th>job</th>\n      <th>dob</th>\n      <th>trans_num</th>\n      <th>unix_time</th>\n      <th>merch_lat</th>\n      <th>merch_long</th>\n      <th>is_fraud</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>2020-06-21 12:14:25</td>\n      <td>2291163933867244</td>\n      <td>fraud_Kirlin and Sons</td>\n      <td>personal_care</td>\n      <td>2.86</td>\n      <td>Jeff</td>\n      <td>Elliott</td>\n      <td>M</td>\n      <td>351 Darlene Green</td>\n      <td>...</td>\n      <td>33.9659</td>\n      <td>-80.9355</td>\n      <td>333497</td>\n      <td>Mechanical engineer</td>\n      <td>1968-03-19</td>\n      <td>2da90c7d74bd46a0caf3777415b3ebd3</td>\n      <td>1371816865</td>\n      <td>33.986391</td>\n      <td>-81.200714</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2020-06-21 12:14:33</td>\n      <td>3573030041201292</td>\n      <td>fraud_Sporer-Keebler</td>\n      <td>personal_care</td>\n      <td>29.84</td>\n      <td>Joanne</td>\n      <td>Williams</td>\n      <td>F</td>\n      <td>3638 Marsh Union</td>\n      <td>...</td>\n      <td>40.3207</td>\n      <td>-110.4360</td>\n      <td>302</td>\n      <td>Sales professional, IT</td>\n      <td>1990-01-17</td>\n      <td>324cc204407e99f51b0d6ca0055005e7</td>\n      <td>1371816873</td>\n      <td>39.450498</td>\n      <td>-109.960431</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>2020-06-21 12:14:53</td>\n      <td>3598215285024754</td>\n      <td>fraud_Swaniawski, Nitzsche and Welch</td>\n      <td>health_fitness</td>\n      <td>41.28</td>\n      <td>Ashley</td>\n      <td>Lopez</td>\n      <td>F</td>\n      <td>9333 Valentine Point</td>\n      <td>...</td>\n      <td>40.6729</td>\n      <td>-73.5365</td>\n      <td>34496</td>\n      <td>Librarian, public</td>\n      <td>1970-10-21</td>\n      <td>c81755dbbbea9d5c77f094348a7579be</td>\n      <td>1371816893</td>\n      <td>40.495810</td>\n      <td>-74.196111</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>2020-06-21 12:15:15</td>\n      <td>3591919803438423</td>\n      <td>fraud_Haley Group</td>\n      <td>misc_pos</td>\n      <td>60.05</td>\n      <td>Brian</td>\n      <td>Williams</td>\n      <td>M</td>\n      <td>32941 Krystal Mill Apt. 552</td>\n      <td>...</td>\n      <td>28.5697</td>\n      <td>-80.8191</td>\n      <td>54767</td>\n      <td>Set designer</td>\n      <td>1987-07-25</td>\n      <td>2159175b9efe66dc301f149d3d5abf8c</td>\n      <td>1371816915</td>\n      <td>28.812398</td>\n      <td>-80.883061</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>2020-06-21 12:15:17</td>\n      <td>3526826139003047</td>\n      <td>fraud_Johnston-Casper</td>\n      <td>travel</td>\n      <td>3.19</td>\n      <td>Nathan</td>\n      <td>Massey</td>\n      <td>M</td>\n      <td>5783 Evan Roads Apt. 465</td>\n      <td>...</td>\n      <td>44.2529</td>\n      <td>-85.0170</td>\n      <td>1126</td>\n      <td>Furniture designer</td>\n      <td>1955-07-06</td>\n      <td>57ff021bd3f328f8738bb535c302a31b</td>\n      <td>1371816917</td>\n      <td>44.959148</td>\n      <td>-85.884734</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 23 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df = pd.concat([train_data,test_data])\ndf.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-30T12:58:45.420290Z","iopub.execute_input":"2024-07-30T12:58:45.420703Z","iopub.status.idle":"2024-07-30T12:58:45.669294Z","shell.execute_reply.started":"2024-07-30T12:58:45.420659Z","shell.execute_reply":"2024-07-30T12:58:45.667965Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"(1852394, 23)"},"metadata":{}}]},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib as plt\ndf.groupby('is_fraud').count().plot.bar()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T12:58:45.670794Z","iopub.execute_input":"2024-07-30T12:58:45.671200Z","iopub.status.idle":"2024-07-30T12:58:49.664324Z","shell.execute_reply.started":"2024-07-30T12:58:45.671167Z","shell.execute_reply":"2024-07-30T12:58:49.662904Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='is_fraud'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"fraud = df[df['is_fraud'] == 1]\nnon_fraud = df[df['is_fraud'] == 0]\nprint(len(fraud), len(non_fraud))","metadata":{"execution":{"iopub.status.busy":"2024-07-30T12:58:49.667044Z","iopub.execute_input":"2024-07-30T12:58:49.667531Z","iopub.status.idle":"2024-07-30T12:58:50.188467Z","shell.execute_reply.started":"2024-07-30T12:58:49.667488Z","shell.execute_reply":"2024-07-30T12:58:50.187246Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"9651 1842743\n","output_type":"stream"}]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T12:58:50.190077Z","iopub.execute_input":"2024-07-30T12:58:50.190485Z","iopub.status.idle":"2024-07-30T12:58:50.210402Z","shell.execute_reply.started":"2024-07-30T12:58:50.190452Z","shell.execute_reply":"2024-07-30T12:58:50.206131Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 1852394 entries, 0 to 555718\nData columns (total 23 columns):\n #   Column                 Dtype  \n---  ------                 -----  \n 0   Unnamed: 0             int64  \n 1   trans_date_trans_time  object \n 2   cc_num                 int64  \n 3   merchant               object \n 4   category               object \n 5   amt                    float64\n 6   first                  object \n 7   last                   object \n 8   gender                 object \n 9   street                 object \n 10  city                   object \n 11  state                  object \n 12  zip                    int64  \n 13  lat                    float64\n 14  long                   float64\n 15  city_pop               int64  \n 16  job                    object \n 17  dob                    object \n 18  trans_num              object \n 19  unix_time              int64  \n 20  merch_lat              float64\n 21  merch_long             float64\n 22  is_fraud               int64  \ndtypes: float64(5), int64(6), object(12)\nmemory usage: 339.2+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T12:58:50.212320Z","iopub.execute_input":"2024-07-30T12:58:50.213631Z","iopub.status.idle":"2024-07-30T12:58:51.409388Z","shell.execute_reply.started":"2024-07-30T12:58:50.213580Z","shell.execute_reply":"2024-07-30T12:58:51.408067Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"         Unnamed: 0        cc_num           amt           zip           lat  \\\ncount  1.852394e+06  1.852394e+06  1.852394e+06  1.852394e+06  1.852394e+06   \nmean   5.371934e+05  4.173860e+17  7.006357e+01  4.881326e+04  3.853931e+01   \nstd    3.669110e+05  1.309115e+18  1.592540e+02  2.688185e+04  5.071470e+00   \nmin    0.000000e+00  6.041621e+10  1.000000e+00  1.257000e+03  2.002710e+01   \n25%    2.315490e+05  1.800429e+14  9.640000e+00  2.623700e+04  3.466890e+01   \n50%    4.630980e+05  3.521417e+15  4.745000e+01  4.817400e+04  3.935430e+01   \n75%    8.335758e+05  4.642255e+15  8.310000e+01  7.204200e+04  4.194040e+01   \nmax    1.296674e+06  4.992346e+18  2.894890e+04  9.992100e+04  6.669330e+01   \n\n               long      city_pop     unix_time     merch_lat    merch_long  \\\ncount  1.852394e+06  1.852394e+06  1.852394e+06  1.852394e+06  1.852394e+06   \nmean  -9.022783e+01  8.864367e+04  1.358674e+09  3.853898e+01 -9.022794e+01   \nstd    1.374789e+01  3.014876e+05  1.819508e+07  5.105604e+00  1.375969e+01   \nmin   -1.656723e+02  2.300000e+01  1.325376e+09  1.902742e+01 -1.666716e+02   \n25%   -9.679800e+01  7.410000e+02  1.343017e+09  3.474012e+01 -9.689944e+01   \n50%   -8.747690e+01  2.443000e+03  1.357089e+09  3.936890e+01 -8.744069e+01   \n75%   -8.015800e+01  2.032800e+04  1.374581e+09  4.195626e+01 -8.024511e+01   \nmax   -6.795030e+01  2.906700e+06  1.388534e+09  6.751027e+01 -6.695090e+01   \n\n           is_fraud  \ncount  1.852394e+06  \nmean   5.210015e-03  \nstd    7.199217e-02  \nmin    0.000000e+00  \n25%    0.000000e+00  \n50%    0.000000e+00  \n75%    0.000000e+00  \nmax    1.000000e+00  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>cc_num</th>\n      <th>amt</th>\n      <th>zip</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>city_pop</th>\n      <th>unix_time</th>\n      <th>merch_lat</th>\n      <th>merch_long</th>\n      <th>is_fraud</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>1.852394e+06</td>\n      <td>1.852394e+06</td>\n      <td>1.852394e+06</td>\n      <td>1.852394e+06</td>\n      <td>1.852394e+06</td>\n      <td>1.852394e+06</td>\n      <td>1.852394e+06</td>\n      <td>1.852394e+06</td>\n      <td>1.852394e+06</td>\n      <td>1.852394e+06</td>\n      <td>1.852394e+06</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5.371934e+05</td>\n      <td>4.173860e+17</td>\n      <td>7.006357e+01</td>\n      <td>4.881326e+04</td>\n      <td>3.853931e+01</td>\n      <td>-9.022783e+01</td>\n      <td>8.864367e+04</td>\n      <td>1.358674e+09</td>\n      <td>3.853898e+01</td>\n      <td>-9.022794e+01</td>\n      <td>5.210015e-03</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>3.669110e+05</td>\n      <td>1.309115e+18</td>\n      <td>1.592540e+02</td>\n      <td>2.688185e+04</td>\n      <td>5.071470e+00</td>\n      <td>1.374789e+01</td>\n      <td>3.014876e+05</td>\n      <td>1.819508e+07</td>\n      <td>5.105604e+00</td>\n      <td>1.375969e+01</td>\n      <td>7.199217e-02</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000e+00</td>\n      <td>6.041621e+10</td>\n      <td>1.000000e+00</td>\n      <td>1.257000e+03</td>\n      <td>2.002710e+01</td>\n      <td>-1.656723e+02</td>\n      <td>2.300000e+01</td>\n      <td>1.325376e+09</td>\n      <td>1.902742e+01</td>\n      <td>-1.666716e+02</td>\n      <td>0.000000e+00</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2.315490e+05</td>\n      <td>1.800429e+14</td>\n      <td>9.640000e+00</td>\n      <td>2.623700e+04</td>\n      <td>3.466890e+01</td>\n      <td>-9.679800e+01</td>\n      <td>7.410000e+02</td>\n      <td>1.343017e+09</td>\n      <td>3.474012e+01</td>\n      <td>-9.689944e+01</td>\n      <td>0.000000e+00</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>4.630980e+05</td>\n      <td>3.521417e+15</td>\n      <td>4.745000e+01</td>\n      <td>4.817400e+04</td>\n      <td>3.935430e+01</td>\n      <td>-8.747690e+01</td>\n      <td>2.443000e+03</td>\n      <td>1.357089e+09</td>\n      <td>3.936890e+01</td>\n      <td>-8.744069e+01</td>\n      <td>0.000000e+00</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>8.335758e+05</td>\n      <td>4.642255e+15</td>\n      <td>8.310000e+01</td>\n      <td>7.204200e+04</td>\n      <td>4.194040e+01</td>\n      <td>-8.015800e+01</td>\n      <td>2.032800e+04</td>\n      <td>1.374581e+09</td>\n      <td>4.195626e+01</td>\n      <td>-8.024511e+01</td>\n      <td>0.000000e+00</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.296674e+06</td>\n      <td>4.992346e+18</td>\n      <td>2.894890e+04</td>\n      <td>9.992100e+04</td>\n      <td>6.669330e+01</td>\n      <td>-6.795030e+01</td>\n      <td>2.906700e+06</td>\n      <td>1.388534e+09</td>\n      <td>6.751027e+01</td>\n      <td>-6.695090e+01</td>\n      <td>1.000000e+00</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Data Perparation","metadata":{}},{"cell_type":"code","source":"df_balanced = pd.concat([fraud, non_fraud.sample(len(fraud))])\ndf.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-30T12:58:51.411147Z","iopub.execute_input":"2024-07-30T12:58:51.411587Z","iopub.status.idle":"2024-07-30T12:58:51.514072Z","shell.execute_reply.started":"2024-07-30T12:58:51.411548Z","shell.execute_reply":"2024-07-30T12:58:51.512846Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"(1852394, 23)"},"metadata":{}}]},{"cell_type":"code","source":"df_balanced.groupby('is_fraud').count()['cc_num'].plot.bar()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T12:58:51.515736Z","iopub.execute_input":"2024-07-30T12:58:51.516174Z","iopub.status.idle":"2024-07-30T12:58:51.797920Z","shell.execute_reply.started":"2024-07-30T12:58:51.516137Z","shell.execute_reply":"2024-07-30T12:58:51.796701Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='is_fraud'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"#dropping columns has no relation to the target\ncolumns_dropped = ['Unnamed: 0',\n                   'merchant', \n                   'cc_num',\n                   'first', \n                   'last',\n                   'gender',\n                   'trans_num',\n                   'unix_time',\n                   'street',\n                   'merch_lat',\n                   'merch_long',\n                   'job',\n                   'zip',\n                   ]\n\ndf_balanced.drop(columns = columns_dropped, inplace = True)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T12:58:51.799627Z","iopub.execute_input":"2024-07-30T12:58:51.800023Z","iopub.status.idle":"2024-07-30T12:58:51.816585Z","shell.execute_reply.started":"2024-07-30T12:58:51.799977Z","shell.execute_reply":"2024-07-30T12:58:51.815404Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"df_balanced.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T12:58:51.821363Z","iopub.execute_input":"2024-07-30T12:58:51.821760Z","iopub.status.idle":"2024-07-30T12:58:51.852515Z","shell.execute_reply.started":"2024-07-30T12:58:51.821728Z","shell.execute_reply":"2024-07-30T12:58:51.851060Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 19302 entries, 2449 to 50951\nData columns (total 10 columns):\n #   Column                 Non-Null Count  Dtype  \n---  ------                 --------------  -----  \n 0   trans_date_trans_time  19302 non-null  object \n 1   category               19302 non-null  object \n 2   amt                    19302 non-null  float64\n 3   city                   19302 non-null  object \n 4   state                  19302 non-null  object \n 5   lat                    19302 non-null  float64\n 6   long                   19302 non-null  float64\n 7   city_pop               19302 non-null  int64  \n 8   dob                    19302 non-null  object \n 9   is_fraud               19302 non-null  int64  \ndtypes: float64(3), int64(2), object(5)\nmemory usage: 1.6+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"df_balanced.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T12:58:51.854278Z","iopub.execute_input":"2024-07-30T12:58:51.854642Z","iopub.status.idle":"2024-07-30T12:58:51.873428Z","shell.execute_reply.started":"2024-07-30T12:58:51.854610Z","shell.execute_reply":"2024-07-30T12:58:51.872256Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"     trans_date_trans_time       category     amt           city state  \\\n2449   2019-01-02 01:06:37    grocery_pos  281.06  Collettsville    NC   \n2472   2019-01-02 01:47:29  gas_transport   11.52    San Antonio    TX   \n2523   2019-01-02 03:05:23    grocery_pos  276.31    San Antonio    TX   \n2546   2019-01-02 03:38:03  gas_transport    7.03  Collettsville    NC   \n2553   2019-01-02 03:55:47    grocery_pos  275.73    San Antonio    TX   \n\n          lat     long  city_pop         dob  is_fraud  \n2449  35.9946 -81.7266       885  1988-09-15         1  \n2472  29.4400 -98.4590   1595797  1960-10-28         1  \n2523  29.4400 -98.4590   1595797  1960-10-28         1  \n2546  35.9946 -81.7266       885  1988-09-15         1  \n2553  29.4400 -98.4590   1595797  1960-10-28         1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>trans_date_trans_time</th>\n      <th>category</th>\n      <th>amt</th>\n      <th>city</th>\n      <th>state</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>city_pop</th>\n      <th>dob</th>\n      <th>is_fraud</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2449</th>\n      <td>2019-01-02 01:06:37</td>\n      <td>grocery_pos</td>\n      <td>281.06</td>\n      <td>Collettsville</td>\n      <td>NC</td>\n      <td>35.9946</td>\n      <td>-81.7266</td>\n      <td>885</td>\n      <td>1988-09-15</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2472</th>\n      <td>2019-01-02 01:47:29</td>\n      <td>gas_transport</td>\n      <td>11.52</td>\n      <td>San Antonio</td>\n      <td>TX</td>\n      <td>29.4400</td>\n      <td>-98.4590</td>\n      <td>1595797</td>\n      <td>1960-10-28</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2523</th>\n      <td>2019-01-02 03:05:23</td>\n      <td>grocery_pos</td>\n      <td>276.31</td>\n      <td>San Antonio</td>\n      <td>TX</td>\n      <td>29.4400</td>\n      <td>-98.4590</td>\n      <td>1595797</td>\n      <td>1960-10-28</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2546</th>\n      <td>2019-01-02 03:38:03</td>\n      <td>gas_transport</td>\n      <td>7.03</td>\n      <td>Collettsville</td>\n      <td>NC</td>\n      <td>35.9946</td>\n      <td>-81.7266</td>\n      <td>885</td>\n      <td>1988-09-15</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2553</th>\n      <td>2019-01-02 03:55:47</td>\n      <td>grocery_pos</td>\n      <td>275.73</td>\n      <td>San Antonio</td>\n      <td>TX</td>\n      <td>29.4400</td>\n      <td>-98.4590</td>\n      <td>1595797</td>\n      <td>1960-10-28</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_balanced['trans_date_trans_time'] = pd.to_datetime(df_balanced['trans_date_trans_time'])\ndf_balanced['dob'] = pd.to_datetime(df_balanced['dob'])","metadata":{"execution":{"iopub.status.busy":"2024-07-30T12:58:51.875595Z","iopub.execute_input":"2024-07-30T12:58:51.875963Z","iopub.status.idle":"2024-07-30T12:58:51.908939Z","shell.execute_reply.started":"2024-07-30T12:58:51.875934Z","shell.execute_reply":"2024-07-30T12:58:51.907767Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"df_balanced.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T12:58:51.910488Z","iopub.execute_input":"2024-07-30T12:58:51.910839Z","iopub.status.idle":"2024-07-30T12:58:51.934472Z","shell.execute_reply.started":"2024-07-30T12:58:51.910809Z","shell.execute_reply":"2024-07-30T12:58:51.933071Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 19302 entries, 2449 to 50951\nData columns (total 10 columns):\n #   Column                 Non-Null Count  Dtype         \n---  ------                 --------------  -----         \n 0   trans_date_trans_time  19302 non-null  datetime64[ns]\n 1   category               19302 non-null  object        \n 2   amt                    19302 non-null  float64       \n 3   city                   19302 non-null  object        \n 4   state                  19302 non-null  object        \n 5   lat                    19302 non-null  float64       \n 6   long                   19302 non-null  float64       \n 7   city_pop               19302 non-null  int64         \n 8   dob                    19302 non-null  datetime64[ns]\n 9   is_fraud               19302 non-null  int64         \ndtypes: datetime64[ns](2), float64(3), int64(2), object(3)\nmemory usage: 1.6+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"df_balanced['trans_date_trans_time'] = df_balanced['trans_date_trans_time'].dt.hour","metadata":{"execution":{"iopub.status.busy":"2024-07-30T12:58:51.936635Z","iopub.execute_input":"2024-07-30T12:58:51.937062Z","iopub.status.idle":"2024-07-30T12:58:51.943941Z","shell.execute_reply.started":"2024-07-30T12:58:51.937024Z","shell.execute_reply":"2024-07-30T12:58:51.942734Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"df_balanced = df_balanced.rename(columns = {'trans_date_trans_time': 'hour_transaction'})","metadata":{"execution":{"iopub.status.busy":"2024-07-30T12:58:51.945975Z","iopub.execute_input":"2024-07-30T12:58:51.946389Z","iopub.status.idle":"2024-07-30T12:58:51.960858Z","shell.execute_reply.started":"2024-07-30T12:58:51.946356Z","shell.execute_reply":"2024-07-30T12:58:51.959492Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"def get_tod(hour):\n    if 4 < hour['hour_transaction'] <= 12:\n        ans = 'morning'\n    elif 12 < hour['hour_transaction'] <= 20:\n        ans = 'afternoon'\n    elif hour['hour_transaction'] <= 4 or hour['hour_transaction'] > 20:\n        ans = 'night'\n    return ans","metadata":{"execution":{"iopub.status.busy":"2024-07-30T12:58:51.962524Z","iopub.execute_input":"2024-07-30T12:58:51.962947Z","iopub.status.idle":"2024-07-30T12:58:51.971238Z","shell.execute_reply.started":"2024-07-30T12:58:51.962916Z","shell.execute_reply":"2024-07-30T12:58:51.969668Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"df_balanced['hour_transaction'] = df_balanced.apply(get_tod, axis = 1)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T12:58:51.972760Z","iopub.execute_input":"2024-07-30T12:58:51.973210Z","iopub.status.idle":"2024-07-30T12:58:52.423032Z","shell.execute_reply.started":"2024-07-30T12:58:51.973175Z","shell.execute_reply":"2024-07-30T12:58:52.421661Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"df_balanced.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T12:59:26.520587Z","iopub.execute_input":"2024-07-30T12:59:26.521094Z","iopub.status.idle":"2024-07-30T12:59:26.543624Z","shell.execute_reply.started":"2024-07-30T12:59:26.521057Z","shell.execute_reply":"2024-07-30T12:59:26.542230Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"     hour_transaction       category     amt           city state      lat  \\\n2449            night    grocery_pos  281.06  Collettsville    NC  35.9946   \n2472            night  gas_transport   11.52    San Antonio    TX  29.4400   \n2523            night    grocery_pos  276.31    San Antonio    TX  29.4400   \n2546            night  gas_transport    7.03  Collettsville    NC  35.9946   \n2553            night    grocery_pos  275.73    San Antonio    TX  29.4400   \n\n         long  city_pop        dob  is_fraud  \n2449 -81.7266       885 1988-09-15         1  \n2472 -98.4590   1595797 1960-10-28         1  \n2523 -98.4590   1595797 1960-10-28         1  \n2546 -81.7266       885 1988-09-15         1  \n2553 -98.4590   1595797 1960-10-28         1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>hour_transaction</th>\n      <th>category</th>\n      <th>amt</th>\n      <th>city</th>\n      <th>state</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>city_pop</th>\n      <th>dob</th>\n      <th>is_fraud</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2449</th>\n      <td>night</td>\n      <td>grocery_pos</td>\n      <td>281.06</td>\n      <td>Collettsville</td>\n      <td>NC</td>\n      <td>35.9946</td>\n      <td>-81.7266</td>\n      <td>885</td>\n      <td>1988-09-15</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2472</th>\n      <td>night</td>\n      <td>gas_transport</td>\n      <td>11.52</td>\n      <td>San Antonio</td>\n      <td>TX</td>\n      <td>29.4400</td>\n      <td>-98.4590</td>\n      <td>1595797</td>\n      <td>1960-10-28</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2523</th>\n      <td>night</td>\n      <td>grocery_pos</td>\n      <td>276.31</td>\n      <td>San Antonio</td>\n      <td>TX</td>\n      <td>29.4400</td>\n      <td>-98.4590</td>\n      <td>1595797</td>\n      <td>1960-10-28</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2546</th>\n      <td>night</td>\n      <td>gas_transport</td>\n      <td>7.03</td>\n      <td>Collettsville</td>\n      <td>NC</td>\n      <td>35.9946</td>\n      <td>-81.7266</td>\n      <td>885</td>\n      <td>1988-09-15</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2553</th>\n      <td>night</td>\n      <td>grocery_pos</td>\n      <td>275.73</td>\n      <td>San Antonio</td>\n      <td>TX</td>\n      <td>29.4400</td>\n      <td>-98.4590</td>\n      <td>1595797</td>\n      <td>1960-10-28</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from datetime import datetime\ndf_balanced['dob']= df_balanced['dob'].dt.year\ndf_balanced = df_balanced.rename(columns = {'dob': 'age'})\ndf_balanced['age'] = datetime.now().year - df_balanced['age']","metadata":{"execution":{"iopub.status.busy":"2024-07-30T13:00:14.053966Z","iopub.execute_input":"2024-07-30T13:00:14.054388Z","iopub.status.idle":"2024-07-30T13:00:14.069537Z","shell.execute_reply.started":"2024-07-30T13:00:14.054358Z","shell.execute_reply":"2024-07-30T13:00:14.068344Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"df_balanced[df_balanced['is_fraud'] == 1].groupby('age').count()['is_fraud']","metadata":{"execution":{"iopub.status.busy":"2024-07-30T13:00:28.793206Z","iopub.execute_input":"2024-07-30T13:00:28.793585Z","iopub.status.idle":"2024-07-30T13:00:28.814776Z","shell.execute_reply.started":"2024-07-30T13:00:28.793557Z","shell.execute_reply":"2024-07-30T13:00:28.813351Z"},"trusted":true},"execution_count":23,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"age\n19      7\n20     32\n21     21\n22     12\n23     58\n       ..\n96     41\n97     54\n98     33\n99     11\n100     7\nName: is_fraud, Length: 82, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"NUMERICAL_FEATURES = [i for i in df_balanced.columns if df_balanced[i].dtype == 'int64'\\\n                      or df_balanced[i].dtype =='int32' \\\n                      or df_balanced[i].dtype =='float64']\nCATEGORICAL_FEATURES = [i for i in df_balanced.columns if df_balanced[i].dtype == 'object']","metadata":{"execution":{"iopub.status.busy":"2024-07-30T13:01:18.580510Z","iopub.execute_input":"2024-07-30T13:01:18.580955Z","iopub.status.idle":"2024-07-30T13:01:18.588852Z","shell.execute_reply.started":"2024-07-30T13:01:18.580914Z","shell.execute_reply":"2024-07-30T13:01:18.587510Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"NUMERICAL_FEATURES","metadata":{"execution":{"iopub.status.busy":"2024-07-30T13:01:26.152312Z","iopub.execute_input":"2024-07-30T13:01:26.152786Z","iopub.status.idle":"2024-07-30T13:01:26.161282Z","shell.execute_reply.started":"2024-07-30T13:01:26.152751Z","shell.execute_reply":"2024-07-30T13:01:26.160042Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"['amt', 'lat', 'long', 'city_pop', 'age', 'is_fraud']"},"metadata":{}}]},{"cell_type":"code","source":"CATEGORICAL_FEATURES","metadata":{"execution":{"iopub.status.busy":"2024-07-30T13:01:35.743450Z","iopub.execute_input":"2024-07-30T13:01:35.743866Z","iopub.status.idle":"2024-07-30T13:01:35.752509Z","shell.execute_reply.started":"2024-07-30T13:01:35.743835Z","shell.execute_reply":"2024-07-30T13:01:35.750972Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"['hour_transaction', 'category', 'city', 'state']"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.preprocessing import OrdinalEncoder\n\nencoder = OrdinalEncoder()\nencoder.fit(df_balanced[CATEGORICAL_FEATURES])\n\ndf_balanced[CATEGORICAL_FEATURES] = encoder.transform(df_balanced[CATEGORICAL_FEATURES])","metadata":{"execution":{"iopub.status.busy":"2024-07-30T13:05:05.693107Z","iopub.execute_input":"2024-07-30T13:05:05.693570Z","iopub.status.idle":"2024-07-30T13:05:05.837840Z","shell.execute_reply.started":"2024-07-30T13:05:05.693537Z","shell.execute_reply":"2024-07-30T13:05:05.836546Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"df_balanced.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T13:05:49.260307Z","iopub.execute_input":"2024-07-30T13:05:49.260696Z","iopub.status.idle":"2024-07-30T13:05:49.283009Z","shell.execute_reply.started":"2024-07-30T13:05:49.260668Z","shell.execute_reply":"2024-07-30T13:05:49.281460Z"},"trusted":true},"execution_count":29,"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"      hour_transaction  category     amt   city  state      lat     long  \\\n2449               2.0       4.0  281.06  165.0   27.0  35.9946 -81.7266   \n2472               2.0       2.0   11.52  733.0   43.0  29.4400 -98.4590   \n2523               2.0       4.0  276.31  733.0   43.0  29.4400 -98.4590   \n2546               2.0       2.0    7.03  165.0   27.0  35.9946 -81.7266   \n2553               2.0       4.0  275.73  733.0   43.0  29.4400 -98.4590   \n\n      city_pop  age  is_fraud  \n2449       885   36         1  \n2472   1595797   64         1  \n2523   1595797   64         1  \n2546       885   36         1  \n2553   1595797   64         1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>hour_transaction</th>\n      <th>category</th>\n      <th>amt</th>\n      <th>city</th>\n      <th>state</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>city_pop</th>\n      <th>age</th>\n      <th>is_fraud</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2449</th>\n      <td>2.0</td>\n      <td>4.0</td>\n      <td>281.06</td>\n      <td>165.0</td>\n      <td>27.0</td>\n      <td>35.9946</td>\n      <td>-81.7266</td>\n      <td>885</td>\n      <td>36</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2472</th>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>11.52</td>\n      <td>733.0</td>\n      <td>43.0</td>\n      <td>29.4400</td>\n      <td>-98.4590</td>\n      <td>1595797</td>\n      <td>64</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2523</th>\n      <td>2.0</td>\n      <td>4.0</td>\n      <td>276.31</td>\n      <td>733.0</td>\n      <td>43.0</td>\n      <td>29.4400</td>\n      <td>-98.4590</td>\n      <td>1595797</td>\n      <td>64</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2546</th>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>7.03</td>\n      <td>165.0</td>\n      <td>27.0</td>\n      <td>35.9946</td>\n      <td>-81.7266</td>\n      <td>885</td>\n      <td>36</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2553</th>\n      <td>2.0</td>\n      <td>4.0</td>\n      <td>275.73</td>\n      <td>733.0</td>\n      <td>43.0</td>\n      <td>29.4400</td>\n      <td>-98.4590</td>\n      <td>1595797</td>\n      <td>64</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_balanced.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T13:06:11.108234Z","iopub.execute_input":"2024-07-30T13:06:11.108839Z","iopub.status.idle":"2024-07-30T13:06:11.123848Z","shell.execute_reply.started":"2024-07-30T13:06:11.108794Z","shell.execute_reply":"2024-07-30T13:06:11.122556Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 19302 entries, 2449 to 50951\nData columns (total 10 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   hour_transaction  19302 non-null  float64\n 1   category          19302 non-null  float64\n 2   amt               19302 non-null  float64\n 3   city              19302 non-null  float64\n 4   state             19302 non-null  float64\n 5   lat               19302 non-null  float64\n 6   long              19302 non-null  float64\n 7   city_pop          19302 non-null  int64  \n 8   age               19302 non-null  int32  \n 9   is_fraud          19302 non-null  int64  \ndtypes: float64(7), int32(1), int64(2)\nmemory usage: 1.5 MB\n","output_type":"stream"}]},{"cell_type":"code","source":"df_balanced[['is_fraud', 'age']] = df_balanced[['is_fraud', 'age']].astype('float64')","metadata":{"execution":{"iopub.status.busy":"2024-07-30T13:06:45.183316Z","iopub.execute_input":"2024-07-30T13:06:45.184498Z","iopub.status.idle":"2024-07-30T13:06:45.194931Z","shell.execute_reply.started":"2024-07-30T13:06:45.184455Z","shell.execute_reply":"2024-07-30T13:06:45.193561Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\ndf_scaled = scaler.fit_transform(df_balanced)\ndf_scaled = pd.DataFrame(df_scaled)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T13:07:11.689146Z","iopub.execute_input":"2024-07-30T13:07:11.689549Z","iopub.status.idle":"2024-07-30T13:07:11.704601Z","shell.execute_reply.started":"2024-07-30T13:07:11.689519Z","shell.execute_reply":"2024-07-30T13:07:11.702907Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"last_column = df_scaled.shape[1]-1","metadata":{"execution":{"iopub.status.busy":"2024-07-30T13:07:23.894452Z","iopub.execute_input":"2024-07-30T13:07:23.895384Z","iopub.status.idle":"2024-07-30T13:07:23.900733Z","shell.execute_reply.started":"2024-07-30T13:07:23.895331Z","shell.execute_reply":"2024-07-30T13:07:23.899374Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"print(f\"Not fraud: {df_scaled[df_scaled[last_column] == 0].count()[last_column]}\")\nprint(f\"Fraud: {df_scaled[df_scaled[last_column] == 1].count()[last_column]}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-30T13:07:33.632687Z","iopub.execute_input":"2024-07-30T13:07:33.633108Z","iopub.status.idle":"2024-07-30T13:07:33.645951Z","shell.execute_reply.started":"2024-07-30T13:07:33.633072Z","shell.execute_reply":"2024-07-30T13:07:33.644361Z"},"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"Not fraud: 9651\nFraud: 9651\n","output_type":"stream"}]},{"cell_type":"code","source":"df_scaled.rename(columns={last_column: 'is_fraud'}, inplace=True)\ndf_scaled.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-30T13:07:53.710137Z","iopub.execute_input":"2024-07-30T13:07:53.710622Z","iopub.status.idle":"2024-07-30T13:07:53.732795Z","shell.execute_reply.started":"2024-07-30T13:07:53.710586Z","shell.execute_reply":"2024-07-30T13:07:53.731597Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"     0         1         2         3     4         5         6         7  \\\n0  1.0  0.307692  0.077105  0.182320  0.54  0.342164  0.859026  0.000297   \n1  1.0  0.153846  0.002896  0.809945  0.86  0.201707  0.687801  0.549003   \n2  1.0  0.307692  0.075798  0.809945  0.86  0.201707  0.687801  0.549003   \n3  1.0  0.153846  0.001660  0.182320  0.54  0.342164  0.859026  0.000297   \n4  1.0  0.307692  0.075638  0.809945  0.86  0.201707  0.687801  0.549003   \n\n          8  is_fraud  \n0  0.209877       1.0  \n1  0.555556       1.0  \n2  0.555556       1.0  \n3  0.209877       1.0  \n4  0.555556       1.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>is_fraud</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>0.307692</td>\n      <td>0.077105</td>\n      <td>0.182320</td>\n      <td>0.54</td>\n      <td>0.342164</td>\n      <td>0.859026</td>\n      <td>0.000297</td>\n      <td>0.209877</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>0.153846</td>\n      <td>0.002896</td>\n      <td>0.809945</td>\n      <td>0.86</td>\n      <td>0.201707</td>\n      <td>0.687801</td>\n      <td>0.549003</td>\n      <td>0.555556</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1.0</td>\n      <td>0.307692</td>\n      <td>0.075798</td>\n      <td>0.809945</td>\n      <td>0.86</td>\n      <td>0.201707</td>\n      <td>0.687801</td>\n      <td>0.549003</td>\n      <td>0.555556</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1.0</td>\n      <td>0.153846</td>\n      <td>0.001660</td>\n      <td>0.182320</td>\n      <td>0.54</td>\n      <td>0.342164</td>\n      <td>0.859026</td>\n      <td>0.000297</td>\n      <td>0.209877</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1.0</td>\n      <td>0.307692</td>\n      <td>0.075638</td>\n      <td>0.809945</td>\n      <td>0.86</td>\n      <td>0.201707</td>\n      <td>0.687801</td>\n      <td>0.549003</td>\n      <td>0.555556</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report , accuracy_score\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\nfrom sklearn.model_selection import train_test_split","metadata":{"execution":{"iopub.status.busy":"2024-07-30T13:15:59.852102Z","iopub.execute_input":"2024-07-30T13:15:59.852591Z","iopub.status.idle":"2024-07-30T13:15:59.859731Z","shell.execute_reply.started":"2024-07-30T13:15:59.852557Z","shell.execute_reply":"2024-07-30T13:15:59.858150Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"X = df_scaled.drop(columns = 'is_fraud')\ny = df_scaled['is_fraud']","metadata":{"execution":{"iopub.status.busy":"2024-07-30T13:09:38.267088Z","iopub.execute_input":"2024-07-30T13:09:38.267541Z","iopub.status.idle":"2024-07-30T13:09:38.275703Z","shell.execute_reply.started":"2024-07-30T13:09:38.267507Z","shell.execute_reply":"2024-07-30T13:09:38.274308Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T13:09:56.491816Z","iopub.execute_input":"2024-07-30T13:09:56.492341Z","iopub.status.idle":"2024-07-30T13:09:56.504653Z","shell.execute_reply.started":"2024-07-30T13:09:56.492303Z","shell.execute_reply":"2024-07-30T13:09:56.503355Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"from xgboost import XGBClassifier\nxgb = XGBClassifier(objective='binary:logistic')\nxgb.fit(x_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T13:10:12.834966Z","iopub.execute_input":"2024-07-30T13:10:12.836162Z","iopub.status.idle":"2024-07-30T13:10:13.168778Z","shell.execute_reply.started":"2024-07-30T13:10:12.836117Z","shell.execute_reply":"2024-07-30T13:10:13.167797Z"},"trusted":true},"execution_count":40,"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, random_state=None, ...)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"y_pred = xgb.predict(x_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-30T13:14:50.725129Z","iopub.execute_input":"2024-07-30T13:14:50.725608Z","iopub.status.idle":"2024-07-30T13:14:50.742775Z","shell.execute_reply.started":"2024-07-30T13:14:50.725562Z","shell.execute_reply":"2024-07-30T13:14:50.741467Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"code","source":"accuracy_test = accuracy_score(y_test, y_pred)\nprint(\"\\nTest Accuracy:\", accuracy_test)\nprint(\"Test Classification Report:\")\nprint(classification_report(y_test, y_pred, zero_division=0))","metadata":{"execution":{"iopub.status.busy":"2024-07-30T13:19:23.423139Z","iopub.execute_input":"2024-07-30T13:19:23.423603Z","iopub.status.idle":"2024-07-30T13:19:23.451994Z","shell.execute_reply.started":"2024-07-30T13:19:23.423571Z","shell.execute_reply":"2024-07-30T13:19:23.450565Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stdout","text":"\nTest Accuracy: 0.9717689717689718\nTest Classification Report:\n              precision    recall  f1-score   support\n\n         0.0       0.98      0.97      0.97      1932\n         1.0       0.97      0.98      0.97      1929\n\n    accuracy                           0.97      3861\n   macro avg       0.97      0.97      0.97      3861\nweighted avg       0.97      0.97      0.97      3861\n\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}